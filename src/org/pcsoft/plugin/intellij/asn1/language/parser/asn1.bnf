{
    parserClass="org.pcsoft.plugin.intellij.asn1.language.parser.Asn1Parser"
    parserUtilClass="org.pcsoft.plugin.intellij.asn1.language.parser.Asn1ParserUtil"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Asn1"
    psiImplClassSuffix="Impl"
    psiPackage="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element"
    psiImplPackage="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element"

    elementTypeHolderClass="org.pcsoft.plugin.intellij.asn1.language.parser.token.Asn1GenElementFactory"
    elementTypeClass="org.pcsoft.plugin.intellij.asn1.language.parser.token.Asn1ElementType"
    tokenTypeClass="org.pcsoft.plugin.intellij.asn1.language.parser.token.Asn1TokenType"

    psiImplUtilClass="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.util.Asn1ElementUtils"
}

asn1File ::= moduleDefinition

/**********************************************************************************************************************/
/******************************* Module Definition ********************************************************************/
/**********************************************************************************************************************/

moduleDefinition ::= moduleDefinitionName valueObjectIdentifier? 'DEFINITIONS' moduleTag '::=' moduleBody {
                     mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
                     implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
                     methods=[getName setName getNameIdentifier getPresentation]
}
moduleDefinitionName ::= moduleDefinitionNameTokenSet
{
    methods=[getName]
}
private moduleTag ::= (['IMPLICIT' | 'EXPLICIT' | 'AUTOMATIC'] 'TAGS')?
private moduleBody ::= 'BEGIN' importDefinition? moduleContent 'END'
moduleContent ::= (classDefinition | objectClassDefinition | objectValueDefinition)*
/**********************************************************************************************************************/
/********************************* Module Imports *********************************************************************/
/**********************************************************************************************************************/
importDefinition ::= 'IMPORTS' importBody
private importBody ::= importContent? ';'
importContent ::= importElement+
importElement ::= importElementTypes 'FROM' importElementModule valueObjectIdentifier? importElementName?
private importElementTypes ::= (importElementType ',')* importElementType
importElementType ::= allClassDefinitionRef
importElementModule ::= importElementModuleTokenSet
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getReference]
}
importElementName ::= importElementNameTokenSet
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier]
}

/**********************************************************************************************************************/
/******************************* Class Definition *********************************************************************/
/**********************************************************************************************************************/

classDefinition ::= classDefinitionName objectClassParameterDefinition? '::=' tagDefinition? LIST_OF_TYPE? ((primitiveType) | (listType classBody) | (classDefinitionType)) constraintDefinition?
 {
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}
classDefinitionName ::= classDefinitionNameTokenSet
{
    methods=[getName]
}
private classBody ::= '{' classContent? '}'
classContent ::= (classDefinitionField ',')* classDefinitionField
/**********************************************************************************************************************/
/********************** Class Definition Field ************************************************************************/
/**********************************************************************************************************************/
classDefinitionField ::= classDefinitionFieldName tagDefinition? LIST_OF_TYPE? (primitiveType | objectClassDefinitionType | classDefinitionType) constraintDefinition?
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}
classDefinitionFieldName ::= classDefinitionFieldNameTokenSet
{
    methods=[getName]
}

/**********************************************************************************************************************/
/******************** Object Class Definition *************************************************************************/
/**********************************************************************************************************************/

objectClassDefinition ::= objectClassDefinitionName '::=' 'CLASS' objectClassBody objectClassConstructor?
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}
objectClassDefinitionName ::= objectClassDefinitionNameTokenSet
{
    methods=[getName]
}
private objectClassBody ::= '{' objectClassContent? '}'
objectClassContent ::= (objectClassDefinitionField ',')* objectClassDefinitionField
private objectClassConstructor ::= 'WITH SYNTAX' '{' objectClassConstructorContent '}'
objectClassConstructorContent ::= objectClassConstructorTokenSet
/**********************************************************************************************************************/
/*************** Object Class Definition Field ************************************************************************/
/**********************************************************************************************************************/
objectClassDefinitionField ::= '&' objectClassDefinitionFieldName LIST_OF_TYPE? (primitiveType | classDefinitionType)? 'UNIQUE'? 'OPTIONAL'? constraintDefinition?
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}
objectClassDefinitionFieldName ::= objectClassDefinitionFieldNameTokenSet
{
    methods=[getName]
}

/**********************************************************************************************************************/
/**************** Object Value Definition *****************************************************************************/
/**********************************************************************************************************************/

objectValueDefinition ::= objectValueDefinitionName (primitiveType | allClassDefinitionRef) '::=' fullValueDefinition
 {
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}
objectValueDefinitionName ::= objectValueDefinitionNameTokenSet
{
    methods=[getName]
}

/**********************************************************************************************************************/
/******************** Tag Definition **********************************************************************************/
/**********************************************************************************************************************/

tagDefinition ::= '[' 'APPLICATION'? NUMBER ']' ('IMPLICIT' | 'EXPLICIT')?
{
    methods=[getTagNumber getTaggingType getTagType]
}

/**********************************************************************************************************************/
/**************** Value Definition ************************************************************************************/
/**********************************************************************************************************************/

private smallValueDefinition ::= booleanValue | NUMBER | valueString | valueRef | valueObjectIdentifier
private fullValueDefinition ::= smallValueDefinition | valueList | valueConstructor
valueObjectIdentifier ::= '{' valueObjectIdentifierPart* '}'
valueObjectIdentifierPart ::= NUMBER | constantDefinitionValue | objectValueDefinitionRef
{
    methods=[getName getNumber]
}
valueString ::= '"' TEXT '"'
private valueConstructor ::= '{' objectClassConstructorTokenSet '}'
valueList ::= '{' (valueListLine ',')* valueListLine? '}'
valueListLine::= classDefinitionFieldRef smallValueDefinition
private booleanValue ::= 'TRUE' | 'FALSE'

/**********************************************************************************************************************/
/**************** Constraint Definition *******************************************************************************/
/**********************************************************************************************************************/

constraintDefinition ::= '(' constraintBody ')'
private constraintBody ::= (constraintValue)*
constraintValue ::= constraintValueSize
constraintValueSize ::= 'SIZE' '(' constraintValueSizeSimple | constraintValueSizeRange | constraintValueSizeOr ')'
private constraintValueSizeSimple ::= NUMBER | 'MIN' | 'MAX'
private constraintValueSizeRange ::= constraintValueSizeSimple '..' constraintValueSizeSimple
private constraintValueSizeOr ::= ((constraintValueSizeSimple | constraintValueSizeOr) '|')* (constraintValueSizeSimple | constraintValueSizeOr)
constraintValueFrom ::= 'FROM' '(' constraintValueFromSimple | constraintValueFromRange | constraintValueFromOr ')'
private constraintValueFromSimple ::= valueString
private constraintValueFromRange ::= constraintValueFromSimple '..' constraintValueFromSimple
private constraintValueFromOr ::= ((constraintValueFromSimple | constraintValueFromRange) '|')* (constraintValueFromSimple | constraintValueFromRange)


/**********************************************************************************************************************/
/**************** Constant Definition *********************************************************************************/
/**********************************************************************************************************************/

constantDefinition ::= '{' constantDefinitionBody '}'
private constantDefinitionBody ::= (constantDefinitionValue ',')* constantDefinitionValue
constantDefinitionValue ::= constantDefinitionValueName '(' smallValueDefinition ')'
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}
constantDefinitionValueName ::= constantDefinitionValueNameTokenSet
{
    methods=[getName]
}

/**********************************************************************************************************************/
/**************** Type Definition *************************************************************************************/
/**********************************************************************************************************************/

private primitiveType ::= PRIMITIVE_TYPE constantDefinition? 'OPTIONAL'? 'UNIQUE'? ('DEFAULT' smallValueDefinition)?
private listType ::= LIST_TYPE
classDefinitionType ::= classDefinitionRef ('{' (classDefinitionTypeArgument ',')* classDefinitionTypeArgument '}')?
private classDefinitionTypeArgument ::= '{' parameterRef '}'
objectClassDefinitionType ::= objectClassDefinitionRef '.' '&' objectClassDefinitionFieldRef objectClassDefinitionRefAttribute
private objectClassDefinitionRefAttribute ::= '(' '{' parameterRef '}' ('{' '@' classDefinitionFieldRef '}')? ')'

/**********************************************************************************************************************/
/**************** Parameter Definition ********************************************************************************/
/**********************************************************************************************************************/

objectClassParameterDefinition ::= '{' (objectClassParameter ',')* objectClassParameter '}'
objectClassParameter ::= objectClassDefinitionRef ':' parameterName
parameterName ::= parameterNameTokenSet
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}

/**********************************************************************************************************************/
/******************* Reference Definition *****************************************************************************/
/**********************************************************************************************************************/
classDefinitionRef ::= classDefinitionNameTokenSet
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getReference]
}
classDefinitionFieldRef ::= classDefinitionFieldNameTokenSet
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getReference]
}
objectClassDefinitionRef ::= objectClassDefinitionNameTokenSet
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getReference]
}
parameterRef ::= parameterNameTokenSet
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getReference]
}
objectClassDefinitionFieldRef ::= objectClassDefinitionFieldNameTokenSet
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getReference]
}
objectValueDefinitionRef ::= objectValueDefinitionNameTokenSet
constantDefinitionValueRef ::= constantDefinitionValueNameTokenSet
allClassDefinitionRef ::= objectClassDefinitionNameTokenSet | classDefinitionNameTokenSet
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getReferences getClassDefinitionReference getObjectClassDefinitionReference]
}
valueRef ::= constantDefinitionValueNameTokenSet | objectValueDefinitionNameTokenSet
{
     mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
     implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
     methods=[getName setName getNameIdentifier getReferences getConstantReference getObjectValueDefinitionReference]
}

/**********************************************************************************************************************/
/******************* Basics *******************************************************************************************/
/**********************************************************************************************************************/

private moduleDefinitionNameTokenSet ::= NAME_CAP
private importElementModuleTokenSet ::= NAME_CAP | NAME_UPPER
private importElementNameTokenSet ::= NAME_NO_CAP | NAME_LOWER
private classDefinitionNameTokenSet ::= NAME_CAP | NAME_UPPER
private classDefinitionFieldNameTokenSet ::= NAME_NO_CAP | NAME_LOWER
private objectClassDefinitionNameTokenSet ::= NAME_UPPER
private objectClassDefinitionFieldNameTokenSet ::= NAME_NO_CAP | NAME_CAP | NAME_LOWER
private objectValueDefinitionNameTokenSet ::= NAME_NO_CAP | NAME_LOWER
private objectClassConstructorTokenSet ::= (NAME_UPPER | NAME_NO_CAP | NAME_LOWER)+
private constantDefinitionValueNameTokenSet ::= NAME_LOWER
private parameterNameTokenSet ::= NAME_CAP | NAME_UPPER
