{
    parserClass="org.pcsoft.plugin.intellij.asn1.language.parser.Asn1Parser"
    parserUtilClass="org.pcsoft.plugin.intellij.asn1.language.parser.Asn1ParserUtil"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Asn1"
    psiImplClassSuffix="Impl"
    psiPackage="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element"
    psiImplPackage="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element"

    elementTypeHolderClass="org.pcsoft.plugin.intellij.asn1.language.parser.token.Asn1GenElementFactory"
    elementTypeClass="org.pcsoft.plugin.intellij.asn1.language.parser.token.Asn1ElementType"
    tokenTypeClass="org.pcsoft.plugin.intellij.asn1.language.parser.token.Asn1TokenType"

    psiImplUtilClass="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.util.Asn1ElementUtils"
}

asn1File ::= moduleDefinition

/**********************************************************************************************************************/
/******************************* Module Definition ********************************************************************/
/**********************************************************************************************************************/

moduleDefinition ::= moduleIdentifier 'DEFINITIONS' encodingReferenceDefault? tagDefault? extensionDefault? '::=' moduleBody encodingControlDefinition? {
                     mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
                     implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
                     methods=[getName setName getNameIdentifier getPresentation]
}
moduleIdentifier ::= NAME (symbolValueObjectIdentifier symbolValueString?)?
{
    methods=[getName]
}
private tagDefault ::= ['IMPLICIT' | 'EXPLICIT' | 'AUTOMATIC'] 'TAGS'
private encodingReferenceDefault ::= NAME 'INSTRUCTIONS'
private extensionDefault ::= 'EXTENSIBILITY IMPLIED'
private moduleBody ::= 'BEGIN' exportDefinition? importDefinition? moduleContent 'END'
moduleContent ::= symbolDefinition*
/**********************************************************************************************************************/
/********************************* Module Imports / Exports ***********************************************************/
/**********************************************************************************************************************/
importDefinition ::= 'IMPORTS' importBody
private importBody ::= importContent? ';'
importContent ::= importElement+
importElement ::= importExportSymbols 'FROM' moduleRef

exportDefinition ::= 'EXPORTS' exportBody
private exportBody ::= ('ALL' | exportContent)? ';'
exportContent ::= importExportSymbols

private importExportSymbols ::= (importExportSymbol ',')* importExportSymbol
importExportSymbol ::= importExportSymbolRef ('{' '}')?
importExportSymbolRef ::=  NAME
{
     mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
     implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
     methods=[getName setName getNameIdentifier getReference]
}
moduleRef ::= NAME <<parseModuleRefOID symbolValueObjectIdentifier>>
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getReference]
}

/**********************************************************************************************************************/
/********************************* Encoding Control Definition ********************************************************/
/**********************************************************************************************************************/

encodingControlDefinition ::= encodingControlElement+
encodingControlElement ::= 'ENCODING-CONTROL' NAME

/**********************************************************************************************************************/
/********************* Symbol Definition ******************************************************************************/
/**********************************************************************************************************************/

symbolDefinition ::= <<parseSymbolDefinition symbolIdentifier parameterDefinition? symbolType? ('::=' tagDefinition?) symbolTypeForAssignment symbolTypeForValue symbolTypeForSet>> symbolConstantDefinition? modifierDefinition? symbolBody?
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[
        getName setName getNameIdentifier getPresentation getSymbolElement getSymbolElementFromReferenceType getSymbolIdentifier getSymbolIdentifierType
        getTagDefinition getSymbolTypeForAssignment getSymbolTypeForValue getSymbolTypeForSet getParameterDefinition
    ]
}
symbolIdentifier ::= NAME
{
    methods=[getName]
}
symbolTypeForAssignment ::= symbolTypeKeyword | symbolType
symbolTypeForValue ::= symbolValue | symbolTypeReference
symbolTypeForSet ::= symbolValueSet

private symbolBody ::= '{' symbolContent? '}' symbolConstructor?
symbolContent ::= ((symbolContentSimple | symbolContentVersion) ',')* (symbolContentSimple | symbolContentVersion)
private symbolContentSimple ::= symbolDefinitionField | '...'
symbolContentVersion ::= '[' '[' (NUMBER ':')? symbolContent? ']' ']'
{
    methods=[getVersionNumber]
}

/**********************************************************************************************************************/
/********************* Symbol Definition Field ************************************************************************/
/**********************************************************************************************************************/

symbolDefinitionField ::= '&'? symbolFieldIdentifier tagDefinition? (symbolType | symbolTypeKeyword | symbolValue)? symbolConstantDefinition? modifierDefinition? symbolBody?
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getPresentation getFieldType getSymbolElement]
}
symbolFieldIdentifier ::= NAME
{
    methods=[getName]
}

/**********************************************************************************************************************/
/********************* Symbol Definition Constructor ******************************************************************/
/**********************************************************************************************************************/

symbolConstructor ::= 'WITH SYNTAX' symbolConstructorBody
private symbolConstructorBody ::= '{' symbolConstructorContent '}'
private symbolConstructorContent ::= symbolConstructorElement*
symbolConstructorElement ::= symbolConstructorWord | ('&' symbolConstructorField)
symbolConstructorWord ::= NAME
symbolConstructorField ::= NAME
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getReferences]
}

/**********************************************************************************************************************/
/******************** Tag Definition **********************************************************************************/
/**********************************************************************************************************************/

tagDefinition ::= '[' 'APPLICATION'? NUMBER? ']' ('IMPLICIT' | 'EXPLICIT')?
{
    methods=[getTagNumber getTaggingType getTagType]
}

/**********************************************************************************************************************/
/***************** Type Definition ************************************************************************************/
/**********************************************************************************************************************/

symbolType ::= symbolTypeNative | symbolTypeReference
symbolTypeNative ::= (PRIMITIVE_TYPE constraintDefinition?) | (constraintDefinition? LIST_TYPE) | (LIST_TYPE constraintDefinition? 'OF' symbolType)
symbolTypeReference ::= ('&'? symbolTypeReferenceValue '.')* '&'? symbolTypeReferenceValue
symbolTypeReferenceValue ::= NAME
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getReferences]
}

symbolTypeKeyword ::= 'CLASS' | 'ENUMERATED' | 'CHOICE'

/**********************************************************************************************************************/
/***************** Value Definition ***********************************************************************************/
/**********************************************************************************************************************/

symbolValue ::= symbolValueFull
private symbolValueFull ::= symbolValueSmall
private symbolValueSmall ::= symbolValueBoolean | symbolValueInteger | symbolValueReal | symbolValueString | symbolValueType | symbolValueObjectIdentifier

symbolValueBoolean ::= 'TRUE' | 'FALSE'
{
    methods=[getBoolean]
}
symbolValueInteger ::= NUMBER
{
    methods=[getInteger]
}
symbolValueReal ::= DECIMAL
{
    methods=[getDecimal]
}
symbolValueString ::= '"' TEXT '"'
{
    methods=[getString]
}
symbolValueObjectIdentifier ::= '{' symbolValueObjectIdentifierElement* '}'
symbolValueObjectIdentifierElement ::= NUMBER | (NAME '(' (NUMBER | symbolTypeReference) ')') | symbolTypeReference
{
    methods=[getIdentifier getNumber]
}
symbolValueType ::= '{' symbolValueTypeContent '}'
private symbolValueTypeContent ::= (symbolValueTypeContentLine ',')* symbolValueTypeContentLine?
//private symbolValueTypeContentTermination ::= !('}' | ',')
symbolValueTypeContentLine ::= (symbolValueTypeFieldReference (symbolValue | symbolTypeReference)) | "..."
{
    //recoverWhile=symbolValueTypeContentTermination
}
symbolValueTypeFieldReference ::= NAME
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getReferences]
}

symbolValueSet ::= symbolValueSetBody
private symbolValueSetBody ::= '{' symbolValueSetContent? '}'
private symbolValueSetContent ::= ((symbolValueSetElement | '...') ',')* (symbolValueSetElement | '...')
symbolValueSetElement ::= ((symbolValueSetElementContent | '...') '|')* (symbolValueSetElementContent | '...')
symbolValueSetElementContent ::= symbolValue | symbolTypeReference

/**********************************************************************************************************************/
/***************** Constant Definition ********************************************************************************/
/**********************************************************************************************************************/

symbolConstantDefinition ::= symbolConstantDefinitionBody
private symbolConstantDefinitionBody ::= '{' symbolConstantDefinitionContent '}'
private symbolConstantDefinitionContent ::= (symbolConstantElement ',')* symbolConstantElement
symbolConstantElement ::= symbolConstantIdentifier symbolConstantElementValue?
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}
symbolConstantElementValue ::= '(' (symbolValue | symbolTypeReference) ')'
symbolConstantIdentifier ::= NAME
{
    methods=[getName]
}

/**********************************************************************************************************************/
/**************** Constraint Definition *******************************************************************************/
/**********************************************************************************************************************/

constraintDefinition ::= ('(' (constraintInBraces '|')* (constraintInBraces (',' '...')?) ')') | (constraintContentWithKeyword (',' '...')?)
private constraintInBraces ::= constraintContentWithValue | constraintContentWithKeyword | constraintDefinition
private constraintContentWithKeyword ::= constraintValueSize | constraintValueFrom | constraintValueComponent | constraintValueExcept
private constraintContentWithValue ::= constraintValueDirect | constraintValueInclude

constraintValueSize ::= 'SIZE' '(' constraintValueSizeContent ')'
private constraintValueSizeValueSet ::= 'MIN' | 'MAX' | symbolValue
private constraintValueSizeContent ::= constraintValueSizeValueSet ('..' constraintValueSizeValueSet)? ('|' constraintValueSizeContent)?

constraintValueFrom ::= 'FROM' '(' constraintValueFromContent ')'
private constraintValueFromValueSet ::= symbolValue
private constraintValueFromContent ::= constraintValueFromValueSet ('..' constraintValueFromValueSet)? ('|' constraintValueFromContent)?

constraintValueDirect ::= constraintValueDirectContent
private constraintValueDirectValueSet ::= 'MIN' | 'MAX' | symbolValue
private constraintValueDirectContent ::= constraintValueDirectValueSet ('..' constraintValueDirectValueSet)?

constraintValueComponent ::= constraintValueComponentSingle | constraintValueComponentMultiple
constraintValueComponentSingle ::= 'WITH COMPONENT' constraintDefinition
constraintValueComponentMultiple ::= 'WITH COMPONENTS' '{' constraintValueComponentContent '}'
private constraintValueComponentContent ::= ("..." ","?)? (constraintValueComponentContentField ',')* constraintValueComponentContentField
private constraintValueComponentContentField ::= symbolTypeReference constraintDefinition? constraintValueComponentContentModifier?
private constraintValueComponentContentModifier ::= 'PRESENT' | 'ABSENT' | 'OPTIONAL'

constraintValueInclude ::= 'INCLUDES'? (symbolTypeNative | symbolTypeReference)

constraintValueExcept ::= 'EXCEPT' constraintDefinition

/**********************************************************************************************************************/
/**************** Modifier Definition *********************************************************************************/
/**********************************************************************************************************************/

modifierDefinition ::= modifierElement+
modifierElement ::= 'UNIQUE' | 'OPTIONAL' | modifierElementDefault
{
    methods=[getModifier]
}
private modifierElementDefault ::= 'DEFAULT' (symbolValue | symbolTypeReference)

/**********************************************************************************************************************/
/**************** Parameter Definition ********************************************************************************/
/**********************************************************************************************************************/

parameterDefinition ::= '{' parameterContent? '}'
private parameterContent ::= (parameterElement ',')* parameterElement
parameterElement ::= parameterForSet | parameterForType
parameterForType ::= parameterForTypeIdentifier
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}
parameterForTypeIdentifier ::= NAME
{
    methods=[getName]
}
parameterForSet ::= symbolTypeReference ':' parameterForSetIdentifier
{
    mixin="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElementImpl"
    implements="org.pcsoft.plugin.intellij.asn1.language.parser.psi.element.Asn1NamedElement"
    methods=[getName setName getNameIdentifier getPresentation]
}
parameterForSetIdentifier ::= NAME
{
    methods=[getName]
}
